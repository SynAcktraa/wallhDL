#!/bin/bash

a_red="\033[1;31m"
a_green="\033[1;32m"
a_yellow="\033[1;33m"
a_blue="\033[1;34m"
a_magenta="\033[1;35m"
a_cyan="\033[1;36m"
a_reset="\033[0m"

head_flag=0
tail_flag=0
s_flag=0
l_flag=0

base_url="https://wallhaven.cc/search?q="
rest="&categories=110&purity=100&sorting=relevance&order=desc&page="
dferror="FlagError: can't use both flags at the same time."
sferror="FlagError: can't use same flags more than once."

help_sec () {
    while IFS= read -r line; do
    printf "%s\n" "$line"
	done <<-EOF
	Usage:
	    ${0##*/} [-p <int> | -t <int>] [-s | -l <type>] [-q <query>]
	Options:
	    -h show helptext
	    -p downloads from head of the query dump
	    -t downloads from tail of the query dump
    -q takes query as a parameter
    -s fetches small size image files
    -l fetches full size image files
	EOF
}

die() { 
  printf "$a_red%s$a_reset\n" "$*" >&2
  exit 1
}

yprint () {
	printf "$a_yellow$*$a_reset" >&2
}
mprint () {
	printf "$a_magenta$*$a_reset\n" >&2
}
gprint () {
  printf "$a_green%s$a_reset\n" "$*" 
}

c_print () {
  printf "$a_cyan%s$a_reset\n" "$*" 
}

fromloc() {
  yprint "1) head 2) tail: " 
  read -r sel && [ $sel -eq 1 ] && head_flag=1 || tail_flag=1 
}
sizestat() {
  yprint "1) small 2) full: " 
  read -r sel && [ $sel -eq 1 ] && s_flag=1 || l_flag=1 
}
fetch_link() {
    
    link_dump+=$(curl -s "${base_url}${enc_query}${rest}$1" \
     | grep -Eo "https:\/\/th.wallhaven.cc\/small\/\w{2}\/\w{6}.jpg"; echo " ")
}

small_dl() {
  wget -q $(echo $1 | sed 's_ _\n_g' | $2 -n $3)
}

large_dl() {
  fullimg=$(echo $1|tr ' ' '\n' | $2 -n $3|sed -E 's_th(\.wallhaven\.cc\/)small(\/\w{2}\/)(\w{6}\.)\w{3}_w\1full\2wallhaven-\3_g')
  wget -q $(echo $fullimg |tr ' ' '\n'| sed -E 's|(.*)|\1jpg|g')
  wget -q -N $(echo $fullimg |tr ' ' '\n'| sed -E 's|(.*)|\1png|g')
 
}

while getopts ":q:p:t:hsl" flags; do
    case "${flags}" in
    
       q) 
          query="${OPTARG}"
          ;;
       p) 
          head_flag=$(( head_flag + 1 ))
          [ $tail_flag -eq 1 ] && die $dferror || [ $head_flag -gt 1 ] && die $sferror
          getcnt=${OPTARG}
          ;;
       t) 
          tail_flag=$(( tail_flag + 1 ))
          [ $head_flag -eq 1 ] && die $dferror || [ $tail_flag -gt 1 ] &&  die $sferror
          getcnt=${OPTARG}
          ;;
       s) 
          s_flag=$(( s_flag + 1 ))
          [ $l_flag -eq 1 ] && die $dferror || [ $s_flag -gt 1 ] &&  die $sferror
          ;;
       l) 
          l_flag=$(( l_flag + 1 ))
          [ $s_flag -eq 1 ] && die $dferror || [ $l_flag -gt 1 ] &&  die $sferror
          ;;
       *|h) 
          help_sec
          exit 1
          ;;
     esac
done


[ -z "$*" ] && yprint "query: " && read -r query && fromloc && yprint "Image count: " && read -r getcnt && sizestat

enc_query=$(echo "$query" | sed 's_ _%20_g')

validate=$(curl -s  "${base_url}${enc_query}" | grep -o "There's nothing here...")
[ ! -z "$validate" ] &&  die "No search results found!"

t_pages=$(curl -s "${base_url}${enc_query}${rest}2" | grep -Eo 'thumb-listing-page-num">2</span> / [0-9]{1,}'| \
          awk 'END {print (NR > 0 && NF > 0) ? $3 : 1}')

wpcnt=$(curl -s "${base_url}${enc_query}" | grep -Eo '[0-9,]{1,} Wallpapers found  for' | \
        sed -E 's_([0-9,]{1,})(.*)_\1_g' | tr -d ',')
        
c_print $(printf "Found %d image files for the query: %s\n" "$wpcnt" "$query")

if [ $getcnt -gt $wpcnt ]; then
     getcnt=$wpcnt
     mprint $(printf "Query out of range. Defaulting to %s\n" "$getcnt")
     l_pages=$t_pages

elif [ $(( $getcnt % 24 )) -eq 0 ]; then
     l_pages=$(( $getcnt / 24 ))
     
else
     l_pages=$(expr $(( $getcnt / 24 )) + 1)
fi

gprint $(printf "Fetching %d image files...\n" "$getcnt")


if [ $head_flag -eq 1 ]; then
    i=1
    while [ $i -le $l_pages ]; do
	    fetch_link $i
      i=$(( i + 1 ))
    done

else
    i=$t_pages
    while [ $i -ge $(( $t_pages - $l_pages )) ]; do
	    fetch_link $i
      i=$(( i - 1 ))
    done
fi

if [ $s_flag -eq 1 ]; then
    [ $head_flag -eq 1 ] && small_dl "$link_dump" "head" $getcnt || small_dl "$link_dump" "tail" $getcnt
else
    if [ $head_flag -eq 1 ]; then
      large_dl "$link_dump" "head" $getcnt
    else
      large_dl "$link_dump" "tail" $getcnt 
    fi
fi

rm -f *.jpg.* *.png.*
